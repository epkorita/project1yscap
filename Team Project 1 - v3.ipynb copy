{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "4449d42c-21d5-49b9-af27-184a3e3bf1f4"
    }
   },
   "outputs": [],
   "source": [
    "# dependencies\n",
    "import os\n",
    "from tqdm import tqdm\n",
    "import time\n",
    "import datetime\n",
    "import dateutil\n",
    "import requests\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pprint import pprint\n",
    "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
    "\n",
    "# import APIs\n",
    "from Keys.NYTAPI import nyt_api\n",
    "from Keys.NewsAPI import news_api\n",
    "from Keys.AlphaAPI import alpha_api"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "7452ebac-f331-4b77-8a11-23dc7e42bcc7"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# make api_keys global vars so that functions can use them\n",
    "def set_api_global():\n",
    "    global nyt_api\n",
    "    global news_api\n",
    "    global alpha_api\n",
    "\n",
    "set_api_global()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbpresent": {
     "id": "73444a3f-8c76-4d5d-a6d6-7205277f6a4a"
    }
   },
   "source": [
    "# Stock Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "95096a3c-28c4-4d34-ada2-0a9bc6f09542"
    }
   },
   "outputs": [],
   "source": [
    "nas = \"NDAQ\"\n",
    "dow = \"DJI\"\n",
    "sap = \"SPX\"\n",
    "\n",
    "sap_base_url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\"+sap+\"&apikey=\"+alpha_api\n",
    "nas_base_url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\"+nas+\"&apikey=\"+alpha_api\n",
    "dow_base_url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\"+dow+\"&apikey=\"+alpha_api"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "61b1b3d7-b15d-47d7-abee-c8cdf0cbfde8"
    }
   },
   "outputs": [],
   "source": [
    "sap_data = requests.get(sap_base_url).json()\n",
    "nas_data = requests.get(nas_base_url).json()\n",
    "dow_data = requests.get(dow_base_url).json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "e93d91a1-0791-4abd-8694-7f8a82299e74"
    }
   },
   "outputs": [],
   "source": [
    "# set dates\n",
    "stock_dates = []\n",
    "\n",
    "# decide the start date\n",
    "start_date = datetime.date(2018,6,1)\n",
    "number_of_days = 91\n",
    "\n",
    "for i in range(number_of_days):\n",
    "    stock_date = start_date + datetime.timedelta(i)\n",
    "    stock_dates.append(stock_date.isoformat())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "5e738271-d4c1-45ee-b513-ad1dc9405629"
    }
   },
   "outputs": [],
   "source": [
    "sap_close_prices = []\n",
    "nas_close_prices = []\n",
    "dow_close_prices = []\n",
    "sap_volumes = []\n",
    "nas_volumes = []\n",
    "dow_volumes = []\n",
    "sap_dates_output = []\n",
    "nas_dates_output = []\n",
    "dow_dates_output = []\n",
    "\n",
    "for stock_date in tqdm(stock_dates):\n",
    "    # There are holidays and weekends\n",
    "    try:\n",
    "        sap_close_prices.append(sap_data[\"Time Series (Daily)\"][stock_date][\"1. open\"])\n",
    "        nas_close_prices.append(nas_data[\"Time Series (Daily)\"][stock_date][\"1. open\"])\n",
    "        dow_close_prices.append(dow_data[\"Time Series (Daily)\"][stock_date][\"1. open\"])\n",
    "        \n",
    "        sap_volumes.append(sap_data[\"Time Series (Daily)\"][stock_date][\"5. volume\"])\n",
    "        nas_volumes.append(nas_data[\"Time Series (Daily)\"][stock_date][\"5. volume\"])\n",
    "        dow_volumes.append(dow_data[\"Time Series (Daily)\"][stock_date][\"5. volume\"])\n",
    "        \n",
    "        if stock_date in sap_data[\"Time Series (Daily)\"].keys():\n",
    "            sap_dates_output.append(stock_date)\n",
    "        if stock_date in nas_data[\"Time Series (Daily)\"].keys():\n",
    "            nas_dates_output.append(stock_date)\n",
    "        if stock_date in dow_data[\"Time Series (Daily)\"].keys():\n",
    "            dow_dates_output.append(stock_date)\n",
    "    except:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "8c3ce2af-fa7d-4e2b-80a5-9dc0cd273bb1"
    }
   },
   "outputs": [],
   "source": [
    "sap_df = pd.DataFrame({\"Date\": sap_dates_output, \"S&P Open Price\": pd.to_numeric(sap_close_prices), \"S&P Volume\": pd.to_numeric(sap_volumes)})\n",
    "nas_df = pd.DataFrame({\"Date\": nas_dates_output, \"NAS Open Price\": pd.to_numeric(nas_close_prices), \"NAS Volume\": pd.to_numeric(nas_volumes)})\n",
    "dow_df = pd.DataFrame({\"Date\": dow_dates_output, \"DOW Open Price\": pd.to_numeric(dow_close_prices), \"DOW Volume\": pd.to_numeric(dow_volumes)})\n",
    "sap_df[\"S&P Volume\"] = sap_df[\"S&P Volume\"].map(\"{:,}\".format)\n",
    "nas_df[\"NAS Volume\"] = nas_df[\"NAS Volume\"].map(\"{:,}\".format)\n",
    "dow_df[\"DOW Volume\"] = dow_df[\"DOW Volume\"].map(\"{:,}\".format)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbpresent": {
     "id": "b45da7a9-21f2-43a3-905e-56f097af14e9"
    }
   },
   "source": [
    "# New York Times"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# build a function that transfer the ISO formatted string back to datetime\n",
    "def getDataTimeFromISO(iso):\n",
    "    d = dateutil.parser.parse(iso)\n",
    "    return d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "getDataTimeFromISO(sap_dates_output[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define the day_lag variable. -1 means the news yesterday may determines the price today.\n",
    "day_lag = -1\n",
    "# change the date\n",
    "bd = getDataTimeFromISO(sap_dates_output[0]).date()+datetime.timedelta(day_lag)\n",
    "# the params works in a way that does not include the end date. Therefore we need one more day from the end date\n",
    "ed = getDataTimeFromISO(sap_dates_output[-1]).date()+datetime.timedelta(day_lag+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "21b7e7c7-8f47-4fd9-9464-255b117d5ac2"
    }
   },
   "outputs": [],
   "source": [
    "bd = bd.isoformat()\n",
    "ed = ed.isoformat()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "8784529d-2093-44d4-9bbc-b586f78d754a"
    }
   },
   "outputs": [],
   "source": [
    "begin_date = bd[:4] + bd[5:7] + bd[8:10]\n",
    "end_date = ed[:4] + ed[5:7] + ed[8:10]\n",
    "print(begin_date, end_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# make bd, ed global\n",
    "def set_date_global():\n",
    "    global bd\n",
    "    global ed\n",
    "    global day_lag\n",
    "\n",
    "set_date_global()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "fe19293b-bfca-42bf-a283-f6de4bc87c22"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# prepare variables\n",
    "# make sure we can loop through all the articles we get\n",
    "n = 200\n",
    "pages = range(n)\n",
    "nyt_snippet = []\n",
    "nyt_pub_date = []\n",
    "\n",
    "# urls\n",
    "nyt_base_url = \"https://api.nytimes.com/svc/search/v2/articlesearch.json?\"\n",
    "\n",
    "# get data from urls\n",
    "for page in tqdm(pages):\n",
    "    params = {\n",
    "        \"api-key\": nyt_api,\n",
    "        \"q\": [\"stock\",\"market\"],\n",
    "        \"begin_date\": begin_date,\n",
    "        \"end_date\": end_date,\n",
    "        \"sort\": \"newest\",\n",
    "        \"fl\": [\"snippet\",\"pub_date\"],\n",
    "        \"page\": page\n",
    "    }\n",
    "    # pause to avoid being classified as spam\n",
    "    # time.sleep(0.2)\n",
    "    \n",
    "    try: \n",
    "        nyt_data = requests.get(nyt_base_url, params=params).json()\n",
    "        # loop through 10 articles on each page\n",
    "        for i in range(10):\n",
    "            nyt_snippet.append(nyt_data[\"response\"][\"docs\"][i][\"snippet\"])\n",
    "            interm_date = nyt_data[\"response\"][\"docs\"][i][\"pub_date\"]\n",
    "            nyt_pub_date.append(interm_date[:4]+interm_date[5:7]+interm_date[8:10])\n",
    "   \n",
    "    except:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# News API - Function to Extract Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def newsAPI(news_input, topic):\n",
    "    base_url = \"https://newsapi.org/v2/everything\"\n",
    "    description = []\n",
    "    pub_date = []\n",
    "    pageSize = 100\n",
    "    pages = range(20)\n",
    "    \n",
    "    if news_input == \"WSJ\":\n",
    "        news_source = \"the-wall-street-journal\"\n",
    "    elif news_input == \"CNN\":\n",
    "        news_source = \"cnn\"\n",
    "    elif news_input == \"FOX\":\n",
    "        news_source = \"fox-news\"\n",
    "    \n",
    "    for page in tqdm(pages):\n",
    "        params = {\n",
    "            \"q\": topic,\n",
    "            \"sources\": news_source,\n",
    "            \"apiKey\": news_api,\n",
    "            \"from\": bd,\n",
    "            \"to\": ed,\n",
    "            \"pageSize\": pageSize,\n",
    "            \"page\": page,\n",
    "            \"sortBy\": \"publishedAt\"\n",
    "        }\n",
    "        # pause to avoid being classified as spam\n",
    "        time.sleep(0.2)\n",
    "        \n",
    "        try:\n",
    "            data = requests.get(base_url, params=params).json()\n",
    "            # loop through each article on each page\n",
    "            for i in range(pageSize):\n",
    "                description.append(data[\"articles\"][i][\"description\"])\n",
    "                pub_date.append(data[\"articles\"][i][\"publishedAt\"][:10])\n",
    "        except:\n",
    "            pass\n",
    "    \n",
    "    return description, pub_date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# WSJ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "wsj_description, wsj_pub_date = newsAPI(\"WSJ\", \"stock\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FOX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fox_description, fox_pub_date = newsAPI(\"FOX\", \"stock\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cnn_description, cnn_pub_date = newsAPI(\"CNN\", \"stock\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbpresent": {
     "id": "9785a933-4b9d-4168-9c24-92444309dab9"
    }
   },
   "source": [
    "# Vader Sentiment Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbpresent": {
     "id": "87a00b1b-c509-42e1-8f9a-3c52243fd515"
    }
   },
   "outputs": [],
   "source": [
    "# define a function to recycle the code\n",
    "def vaderSentimentScoreCalculator(dates, sentences):\n",
    "    analyzer = SentimentIntensityAnalyzer()\n",
    "    vader_scores = []\n",
    "    news_dates = []\n",
    "    try:\n",
    "        for date, sentence in zip(dates, sentences):\n",
    "            vs = analyzer.polarity_scores(sentence)\n",
    "            vader_scores.append(vs['compound'])\n",
    "            news_dates.append(date)\n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "    return news_dates, vader_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nyt_dates, nyt_vaderscores = vaderSentimentScoreCalculator(nyt_pub_date, nyt_snippet)\n",
    "wsj_dates, wsj_vaderscores = vaderSentimentScoreCalculator(wsj_pub_date, wsj_description)\n",
    "fox_dates, fox_vaderscores = vaderSentimentScoreCalculator(fox_pub_date, fox_description)\n",
    "cnn_dates, cnn_vaderscores = vaderSentimentScoreCalculator(cnn_pub_date, cnn_description)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbpresent": {
     "id": "1cdfb901-2ae5-4077-b618-1c8a08fda3c0"
    }
   },
   "source": [
    "# Establish DataFrame - This section needs rework"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def establishdf(news_source, pub_date, vadercores):\n",
    "    \n",
    "    news_dates = []\n",
    "    \n",
    "    for d in pub_date:\n",
    "        d = getDataTimeFromISO(d).date() - datetime.timedelta(day_lag)\n",
    "        d = d.isoformat()\n",
    "        news_dates.append(d)\n",
    "    \n",
    "    news_df = pd.DataFrame({\"Date\": news_dates, news_source+\" VS (Day_Lag=\"+str(day_lag)+\")\": vadercores})\n",
    "    \n",
    "    grouped_news_df = news_df.groupby(\"Date\")\n",
    "    adjusted_news_df = pd.DataFrame({\n",
    "        \"Date\": grouped_news_df.count().index,\n",
    "        news_source+\" VS (Day_Lag=\"+str(day_lag)+\")\": grouped_news_df[news_source+\" VS (Day_Lag=\"+str(day_lag)+\")\"].mean()\n",
    "        })\n",
    "    \n",
    "    return adjusted_news_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nyt_df = establishdf(\"NYT\", nyt_dates, nyt_vaderscores)\n",
    "wsj_df = establishdf(\"WSJ\", wsj_dates, wsj_vaderscores)\n",
    "fox_df = establishdf(\"FOX\", fox_dates, fox_vaderscores)\n",
    "cnn_df = establishdf(\"CNN\", cnn_dates, cnn_vaderscores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nyt_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "wsj_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fox_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "cnn_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Merge Dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:PyData]",
   "language": "python",
   "name": "conda-env-PyData-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
